{"version":3,"sources":["components/VertexInput.js","components/common/PositionContext.js","components/useDrag.js","components/useDrawConnector.js","components/DrawVertex.js","components/DrawArrow.js","components/ButtonGraph.js","components/DrawGraph.js","components/CreateVertex.js","components/GraphMiddleWare.js","dag/graphClass.js","dag/dagClass.js","App.js","reportWebVitals.js","index.js"],"names":["VertexInput","setVerticesInput","useState","vertex","setVertex","incomming","setIncomming","outgoing","setOutgoing","ref_vertex","useRef","Fragment","class","onSubmit","e","preventDefault","alert","current","name","placeholder","value","onChange","target","ref","PositionContext","React","createContext","PositionContextProvider","props","_nameOfVertex","isDisplaced","positionOrigin","positionNew","translate","x","y","positionMap","setPositionMap","Provider","children","useDrag","deps","options","graphState","onPointerDown","onPointerUp","onPointerMove","onDrag","isDragging","originX","originY","translateX","translateY","lastTranslateX","lastTranslateY","state","setState","useContext","handleMouseDown","pageX","pageY","handleMouseUp","handleMouseMove","useEffect","element","addEventListener","document","removeEventListener","isInitGraph","isDefaultGraph","isDraggedGraph","currentDragTarget","useDrawConnector","drawConnectorInitial","divFrom","divTo","arrowRef","divfrom","drawConnector","drawConnectorDynamic","arrowsRefArr","vertexName","draggingDiv","forEach","arrowsRef","getAttribute","posnEndpoints","fromPosnLeft","toPosnLeft","dStrLeft","setAttribute","dArr","split","offsetLeft","offsetTop","offsetHeight","DrawVertex","column","row","forwardedRef","forwardedArrowsRefs","setGraphState","topPosition","leftPosition","topStyle","leftStyle","setIsDisplaced","isMouseUp","setIsMouseUp","setTranslate","newX","newY","newTrans","relatedArrows","relatedArrowsDetector","prevState","prev","isDraggedGraph_byDrag","currentTarget","id","style","position","top","left","transform","trans","className","filter","arrow","DrawArrow","incommingName","forwardedDivsRef","divRelatedRefMap","from","to","div","translateMap","fill","stroke","strokeWidth","markerEnd","vertex_from","vertex_to","ButtonGraph","onClick","gphState","DrawGraph","graph","topSorted","length","arrowsInfoGetter","arrowsRecord","arrowsNumber","divsRefs","Array","map","createRef","arrowsRefs","xmlns","width","height","viewBox","refX","refY","markerWidth","markerHeight","orient","d","i","arrowRenderer","rank","graphHeight","rowProcessedTimes","vertexRenderer","counter","reverse","j","CreateVertex","verticesInput","trim","addEdges","createVertex","giveRank","result","this","topsort","path","push","names","topologySortCaller","_visit_giveRank","leafToRootArr","rankNumber","incomingNames","vertices","nextName","includes","hasOwnProperty","incoming","hasOutgoing","add","fn","visited","len","visit","pop","fromName","toName","Error","join","before","after","Object","prototype","toString","call","addEdge","isArray","GraphMiddleWare","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.59419cf3.chunk.js","sourcesContent":["import React, {useState, useRef } from 'react'\n\n/**\n * Represent UI Layer -- user's input\n * @param {function} setVerticesInput \n * @returns {JSX} form UI\n */\n\nexport default function VertexInput({setVerticesInput}) {\n\n    const [vertex, setVertex] = useState('')\n    const [incomming, setIncomming] = useState('')\n    const [outgoing, setOutgoing] = useState('')\n    const ref_vertex = useRef(null)\n\n\n    const submitHandler = e => {\n        e.preventDefault()\n        if(!vertex) {alert(`${ref_vertex.current.name} must not be empty`)} \n        setVerticesInput({\n            vertex: vertex,\n            incomming: incomming,\n            outgoing: outgoing\n        })\n        setVertex('')\n        setIncomming('')\n        setOutgoing('')\n    }\n    \n    return (\n        <React.Fragment>\n            <div class=\"vertex-input\">\n              <form onSubmit={submitHandler}>\n                <label>Incomming Vertex</label>\n                <input name=\"incomming\" placeholder=\"Ex: a, b, c ...\" value={incomming} onChange={e => { setIncomming(e.target.value) }} />\n                \n                <label>Vertex Name</label>\n                <input name=\"vertex\" value={vertex} onChange={e => { setVertex(e.target.value) }} ref={ref_vertex}/>\n                \n                <label>Outgoing Vertex</label>\n                <input name=\"outgoing\" value={outgoing} placeholder=\"Ex: d, e ,f...\" onChange={e => { setOutgoing(e.target.value) }} />\n\n                <button>Create !</button>\n              </form>\n            </div>\n        </React.Fragment>\n    )\n}\n","import React, { useState } from \"react\";\n\nexport const PositionContext = React.createContext();\n\nexport const PositionContextProvider = (props) => {\n  const [positionMap, setPositionMap] = useState({\n    _nameOfVertex: {\n      isDisplaced: false,\n      positionOrigin: [],\n      positionNew: [],\n      translate: { x: 0, y: 0 },\n    },\n  });\n\n  return (\n    <PositionContext.Provider value={[positionMap, setPositionMap]}>\n      {props.children}\n    </PositionContext.Provider>\n  );\n};\n","import { useState, useEffect, useContext } from \"react\";\nimport { PositionContext } from \"./common/PositionContext\";\n\n/**\n * Represent Dragging functionality implementation hooks -- for vertex's div\n * @param {object} ref as DOM of div\n * @param {object} deps e.g. state translate {x: 0, y: 0} -- for css transform attribute\n * @param {object} options as cb functions to be invoked in event listener. e.g. setTranslate\n * @returns {bool} isDragging\n */\nconst useDrag = (ref, deps = [], options) => {\n  //try {console.log(`>>>useDrag Rendering on ${ref.current.nodeName} -- ${ref.current.id}`)} catch {console.log(\">>>useDrag\")}\n  const [graphState, name] = [...deps];\n\n  // init for cb functions\n  const {\n    onPointerDown = () => {},\n    onPointerUp = () => {},\n    onPointerMove = () => {},\n    onDrag = () => {},\n  } = options;\n\n  const [state, setState] = useState({\n    isDragging: false,\n    originX: 0,\n    originY: 0,\n    translateX: 0,\n    translateY: 0,\n    lastTranslateX: 0,\n    lastTranslateY: 0,\n  });\n  let [positionMap, setPositionMap] = useContext(PositionContext);\n\n  const handleMouseDown = (e) => {\n    setState((state) => ({\n      ...state,\n      isDragging: true,\n      originX: e.pageX,\n      originY: e.pageY,\n    }));\n    onPointerDown(e);\n  };\n\n  const handleMouseUp = (e) => {\n    setState((state) => ({\n      ...state,\n      isDragging: false,\n      originX: 0,\n      originY: 0,\n      lastTranslateX: state.translateX,\n      lastTranslateY: state.translateY,\n    }));\n    //const translateX = e.pageX - state.originX + state.lastTranslateX;\n    //const translateY = e.pageY - state.originY + state.lastTranslateY;\n    onPointerUp();\n  };\n\n  const handleMouseMove = (e) => {\n    const translateX = e.pageX - state.originX + state.lastTranslateX;\n    const translateY = e.pageY - state.originY + state.lastTranslateY;\n\n    setState((state) => ({\n      ...state,\n      translateX,\n      translateY,\n    }));\n\n    onDrag(translateX, translateY);\n    onPointerMove(e);\n  };\n\n  useEffect(() => {\n    const element = ref.current;\n    element.addEventListener(\"mousedown\", handleMouseDown);\n\n    if (state.isDragging) {\n      document.addEventListener(\"mousemove\", handleMouseMove);\n      document.addEventListener(\"mouseup\", handleMouseUp);\n    }\n\n    // >>>>>>>>>> HOW is this working ?? not know <<<<<<<<<<<<<\n    return () => {\n      element.removeEventListener(\"mousedown\", handleMouseDown);\n      document.removeEventListener(\"mousemove\", handleMouseMove);\n      document.removeEventListener(\"mouseup\", handleMouseUp);\n    };\n  }, [[...deps], state.isDragging]);\n\n  useEffect(() => {\n    const { isInitGraph, isDefaultGraph, isDraggedGraph, currentDragTarget } =\n      graphState;\n\n    if (isInitGraph) return;\n    if (isDraggedGraph && positionMap[name]) {\n      const { x, y } = positionMap[name].translate;\n      setState((state) => ({\n        ...state,\n        translateX: x,\n        translateY: y,\n        lastTranslateX: x,\n        lastTranslateY: y,\n      }));\n    }\n    if (isDefaultGraph) {\n      setState((state) => ({\n        ...state,\n        translateX: 0,\n        translateY: 0,\n        lastTranslateX: 0,\n        lastTranslateY: 0,\n      }));\n    }\n  }, [graphState]);\n\n  return {\n    isDragging: state.isDragging,\n    translateX: state.translateX,\n    translateY: state.translateY,\n  };\n};\n\nexport default useDrag;\n","\nexport default function useDrawConnector() {\n\n    /** 呼叫時，有很多個 div\n     * Represent initial svg arrow drawer\n     * @param {DOM} divFrom \n     * @param {DOM} divTo \n     * @param {DOM} arrowRef \n     * @param {Object} translate a map of both div's translate offset\n     */\n    const drawConnectorInitial = (divFrom, divTo, arrowRef, translate = { divfrom:{x:0, y:0}, divTo:{x:0, y:0} }) => {\n      drawConnector(divFrom, divTo, arrowRef, translate) \n    }\n\n    /** 呼叫時，只有一個 div (from端 or to端)\n     * Represent updator of svg arrow drawer after darg-n-drop, BASED on the initail svg arrow para\n     * Represent the distributer: decide change either from-side's or to-side's svg arrow\n     * @param {Array} arrowsRefArr [..., {current: DOM}]\n     * @param {String} vertexName \n     * @param {DOM} draggingDiv \n     * @param {Object} translate {x: 0, y: 0} a map of one div's translate offset\n     */\n    const drawConnectorDynamic = (arrowsRefArr, vertexName, draggingDiv, translate) => {\n        arrowsRefArr.forEach((arrowsRef) => {\n            let arrowRef = arrowsRef.current\n            if (arrowRef.getAttribute(\"vertex_from\") === vertexName) {\n              drawConnector(draggingDiv, null, arrowRef, translate)\n              return \n            }\n            if (arrowRef.getAttribute(\"vertex_to\") === vertexName) {\n              drawConnector(null, draggingDiv, arrowRef, translate)\n              return\n            }\n        })\n    }\n    \n    return ({\n        drawConnectorInitial,\n        drawConnectorDynamic\n    })\n}\n\n\n\n/**\n * Set svg dom tag's attibue, represent svg drawer for arrows which is linked to vertex divs\n * @param {DOM} divFrom represent vertex div\n * @param {DOM} divTo represent vertex div\n * @param {DOM} arrowsRef represent arrow svg html tag: <g> -> <path>\n * @param {Object} translate represent offset of tranfrom:translate -- initial {x:0,y:0}\n */\n const drawConnector = function(divFrom, divTo, arrowRef, translate) {\n    \n    /* for drawConnectorInitial */\n    if (divFrom && divTo) { \n      let [fromPosnLeft, toPosnLeft] = posnEndpoints(divFrom, divTo, translate)\n      let dStrLeft =\n        \"M\" +\n        (fromPosnLeft.x      ) + \",\" + (fromPosnLeft.y) + \" \" +\n        \"C\" +\n        (fromPosnLeft.x - 100) + \",\" + (fromPosnLeft.y) + \" \" +\n        (toPosnLeft.x - 100) + \",\" + (toPosnLeft.y) + \" \" +\n        (toPosnLeft.x      ) + \",\" + (toPosnLeft.y);\n      arrowRef.setAttribute(\"d\", dStrLeft);\n     }\n\n\n    /* for drawConnectorDynamic */\n    let dStr = arrowRef.getAttribute(\"d\")\n    let dArr = dStr.split(\" \") // [\"M142,180\", \"C42,180\", \"192,310\", \"292,310\"]\n    // change divTo's side only\n    if (divFrom === null) {\n      let toPosnLeft = {\n              x: divTo.offsetLeft - 8 + translate.x,\n              y: divTo.offsetTop  + divTo.offsetHeight / 2 - 10 + translate.y\n          };\n      let dStrLeft =\n          dArr[0] + \" \" +\n          dArr[1] + \" \" +\n          (toPosnLeft.x - 100) + \",\" + (toPosnLeft.y) + \" \" +\n          (toPosnLeft.x      ) + \",\" + (toPosnLeft.y);\n      arrowRef.setAttribute(\"d\", dStrLeft);\n    }\n    \n    // change divTo's side only\n    if (divTo === null) {\n        let fromPosnLeft = {\n                x: divFrom.offsetLeft - 8 + translate.x,\n                y: divFrom.offsetTop  + divFrom.offsetHeight / 2 + 10 + translate.y\n            };\n        let dStrLeft =\n            \"M\" +\n            (fromPosnLeft.x      ) + \",\" + (fromPosnLeft.y) + \" \" +\n            \"C\" +\n            (fromPosnLeft.x - 100) + \",\" + (fromPosnLeft.y) + \" \" +\n            dArr[2] + \" \" +\n            dArr[3];\n        //console.log(dStrLeft)\n        //console.log(fromPosnLeft)\n        arrowRef.setAttribute(\"d\", dStrLeft);\n    }\n  };\n\nconst posnEndpoints = (divFrom, divTo, translate) => {\n\n  \n  // base arrow point\n  let fromPosnLeft = {\n    x: divFrom.offsetLeft - 8,\n    y: divFrom.offsetTop  + divFrom.offsetHeight / 2 + 10\n  };\n  let toPosnLeft = {\n      x: divTo.offsetLeft - 8,\n      y: divTo.offsetTop  + divTo.offsetHeight / 2 - 10\n  };\n  \n  // base arrow point + transform translate offset of div\n  fromPosnLeft.x += translate.divFrom.x;\n  fromPosnLeft.y += translate.divFrom.y;\n  toPosnLeft.x += translate.divTo.x;\n  toPosnLeft.y += translate.divTo.y;\n  return [fromPosnLeft, toPosnLeft]\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport useDrag from \"./useDrag\";\nimport useDrawConnector from \"./useDrawConnector\";\nimport { PositionContext } from \"./common/PositionContext\";\n\n/**\n * Represent vertex div's UI\n * Represent drag logic on div and arrows by useDrag\n * @param {string} name\n * @param {int} column\n * @param {int} row\n * @param {object} forwardedRef {current: dom} -- dom for vertex div\n * @param {Array} forwardedArrowsRefs [..., {current: dom} ] -- dom for all arrows svg\n * @returns {JSX} div UI for one vertex\n */\nexport default function DrawVertex({\n  name,\n  column,\n  row,\n  forwardedRef,\n  forwardedArrowsRefs,\n  graphState,\n  setGraphState,\n}) {\n  let topPosition = 150 + 150 * row;\n  let leftPosition = 150 * column;\n  let topStyle = topPosition + \"px\";\n  let leftStyle = leftPosition + \"px\";\n\n  const [isDisplaced, setIsDisplaced] = useState(false);\n  const [isMouseUp, setIsMouseUp] = useState(false);\n  let [positionMap, setPositionMap] = useContext(PositionContext);\n  const [translate, setTranslate] = useState({ x: 0, y: 0 });\n  const { drawConnectorDynamic } = useDrawConnector();\n\n  const drawArrowonDrag = (newX, newY) => {\n    let newTrans = { x: newX, y: newY };\n    let relatedArrows = relatedArrowsDetector(forwardedArrowsRefs, name);\n    setTranslate(newTrans);\n    drawConnectorDynamic(relatedArrows, name, forwardedRef.current, newTrans);\n  };\n\n  const ctxUpdateonMouseUp = () => {\n    setPositionMap((prevState) => ({\n      ...prevState,\n      [name]: {\n        isDisplaced: isDisplaced,\n        positionOrigin: [topPosition, leftPosition],\n        positionNew: [topPosition + translate.x, leftPosition + translate.y],\n        translate: translate,\n      },\n    }));\n  };\n\n  const { isDragging, translateX, translateY } = useDrag(\n    forwardedRef,\n    [graphState, name],\n    {\n      onDrag: drawArrowonDrag,\n      onPointerUp: (e) => {\n        ctxUpdateonMouseUp();\n        setIsMouseUp(!isMouseUp);\n      },\n      onPointerDown: (e) => {\n        //console.log(e.currentTarget.id);\n        setIsDisplaced(true);\n        setGraphState((prev) => ({\n          ...prev,\n          isDefaultGraph: false,\n          isInitGraph: false,\n          isDraggedGraph: false,\n          isDraggedGraph_byDrag: true,\n          currentDragTarget: e.currentTarget.id,\n        }));\n      },\n    }\n  );\n\n  let style = {\n    position: `absolute`,\n    top: `${topStyle}`,\n    left: `${leftStyle}`,\n    transform: `translateX(${translate.x}px) translateY(${translate.y}px)`,\n  };\n\n  useEffect(() => {\n    setPositionMap((prevState) => ({\n      ...prevState,\n      [name]: {\n        isDisplaced: isDisplaced,\n        positionOrigin: [topPosition, leftPosition],\n        positionNew: [topPosition + translate.x, leftPosition + translate.y],\n        translate: translate,\n      },\n    }));\n  }, []);\n\n  useEffect(() => {\n    const {\n      isInitGraph,\n      isDefaultGraph,\n      isDraggedGraph,\n      isDraggedGraph_byDrag,\n      currentDragTarget,\n    } = graphState;\n\n    let trans = {};\n    if (isInitGraph) return;\n    if (isDefaultGraph) trans = { x: 0, y: 0 };\n    if (isDraggedGraph) {\n      trans = positionMap[name] ? positionMap[name].translate : { x: 0, y: 0 }; ///creating new vertex when not isDefaultGraph\n    }\n    if (isDraggedGraph_byDrag) {\n      trans = positionMap[name] ? positionMap[name].translate : { x: 0, y: 0 }; ///creating new vertex when not isDefaultGraph\n    }\n    if (isDraggedGraph_byDrag && currentDragTarget !== name) {\n      // to be optimized\n      trans = { x: 0, y: 0 };\n      let relatedArrows = relatedArrowsDetector(forwardedArrowsRefs, name);\n      drawConnectorDynamic(relatedArrows, name, forwardedRef.current, trans);\n    }\n\n    setTranslate(trans);\n  }, [graphState.isDefaultGraph]);\n\n  return (\n    <div ref={forwardedRef} style={style} className=\"vertex\" id={name}>\n      {isDragging ? `${name} is now 🚀` : name}\n      <p>{`useDrag:  (${translateX},${translateY})`}</p>\n      <p>{`vertex:  (${translate.x},${translate.y})`}</p>\n    </div>\n  );\n}\n\n// 不能 Hoist，因為要等 arrow 畫出來才有辦法存取到  arrows refs\nconst relatedArrowsDetector = (forwardedArrowsRefs, vertexName) => {\n  let relatedArrows = forwardedArrowsRefs.filter((arrow) => {\n    arrow = arrow.current;\n    return (\n      arrow &&\n      (arrow.getAttribute(\"vertex_from\") === vertexName ||\n        arrow.getAttribute(\"vertex_to\") === vertexName)\n    );\n  });\n  return relatedArrows;\n};\n","import React, { useEffect, useContext } from \"react\";\nimport useDrawConnector from \"./useDrawConnector\";\nimport { PositionContext } from \"./common/PositionContext\";\n\n/**\n * Represent arrows svg container html tag (not drawwing on UI)\n * @param {string} incommingName\n * @param {name} name\n * @param {obejct} forwardedRef\n * @returns\n */\nexport default function DrawArrow({\n  incommingName,\n  name,\n  forwardedRef,\n  forwardedDivsRef,\n  graphState,\n}) {\n  let [positionMap] = useContext(PositionContext);\n  const { drawConnectorInitial } = useDrawConnector();\n\n  //關注點分離，畫箭頭的功能 從 DrawGraph 拿回到 DrawArrow\n  useEffect(() => {\n    let divRelatedRefMap = { from: null, to: null };\n    for (let div of forwardedDivsRef) {\n      div = div.current;\n      if (div.id === incommingName) {\n        divRelatedRefMap.from = div;\n      }\n      if (div.id === name) {\n        divRelatedRefMap.to = div;\n      }\n    }\n\n    let translateMap = {\n      divFrom: { x: 0, y: 0 },\n      divTo: { x: 0, y: 0 },\n    };\n    // 當 dragged 後，又 create new vertex 時\n    if (!graphState.isDefaultGraph && positionMap[incommingName]) {\n      translateMap.divFrom = positionMap[incommingName].translate;\n    }\n    if (!graphState.isDefaultGraph && positionMap[name]) {\n      translateMap.divTo = positionMap[name].translate;\n    }\n\n    drawConnectorInitial(\n      divRelatedRefMap.from,\n      divRelatedRefMap.to,\n      forwardedRef.current,\n      translateMap\n    );\n  }, [graphState, forwardedDivsRef]);\n\n  return (\n    <g\n      fill=\"none\"\n      stroke=\"black\"\n      strokeWidth=\"2\"\n      markerEnd=\"url(#arrowhead)\"\n      style={{ position: `absolute` }}\n    >\n      <path\n        ref={forwardedRef}\n        id={`arrowLeft_${name}_${incommingName}`}\n        vertex_from={incommingName}\n        vertex_to={name}\n      />\n    </g>\n  );\n}\n","import React, { useState, useEffect, useContext } from \"react\";\nimport { PositionContext } from \"./common/PositionContext\";\n\nexport default function ButtonGraph({ graphState, setGraphState }) {\n  let [positionMap, setPositionMap] = useContext(PositionContext);\n  const { isDefaultGraph, isInitGraph, isDraggedGraph } = graphState;\n\n  const graphStateSwitcher = () => {\n    const gphState = {\n      isDraggedGraph: false,\n      isDefaultGraph: false,\n      isInitGraph: false,\n      isDraggedGraph_byDrag: false,\n    };\n    if (isDefaultGraph) gphState.isDraggedGraph = true;\n    if (!isDefaultGraph) gphState.isDefaultGraph = true;\n    setGraphState((prev) => ({ ...prev, ...gphState }));\n  };\n\n  return (\n    <div>\n      <button onClick={graphStateSwitcher}>\n        {isDefaultGraph ? \"Back to Dragged Place\" : \"Back to Default Place\"}\n      </button>\n    </div>\n  );\n}\n","import React, { useState, useRef, useEffect, useContext } from \"react\";\n//import ArrowDrawer from './ArrowDrawer'\nimport DrawVertex from \"./DrawVertex\";\nimport DrawArrow from \"./DrawArrow\";\nimport ButtonGraph from \"./ButtonGraph\";\n\n/**\n * Represent middleware for drawwing arrows svg Initially\n * Represent dynmaic render logic for multiple vertex's divs and arrows svg\n * Represent layout for vertex's div and direction arrows svg container\n * @param {object} graph instance of Graph\n * @returns {Component} DrawArrow\n * @returns {Component} DrawVertex\n */\nexport default function DrawGraph({ graph, topSorted }) {\n  //console.log(topSorted)\n  let length = topSorted.length;\n  let [arrowsRecord, arrowsNumber] = arrowsInfoGetter(graph);\n\n  // for btn restting vertex position back to default place\n  // let [isDefaultGraph, setIsDefaultGraph] = useState(true);\n  let [graphState, setGraphState] = useState({\n    isInitGraph: true,\n    isDefaultGraph: false,\n    isDraggedGraph: false,\n    isDraggedGraph_byDrag: false,\n    currentDragTarget: null,\n  });\n\n  // Vertex ref & Arrows ref for DOM (drag-n-drop & arrow connetor)\n  const divsRefs = useRef([]);\n  divsRefs.current = [...new Array(length)].map(() => React.createRef());\n  const arrowsRefs = useRef([]);\n  arrowsRefs.current = [...new Array(arrowsNumber)].map(() =>\n    React.createRef()\n  );\n\n  const arrowRenderer = (arrowsRecord, arrowsNumber) => {\n    return [...Array(arrowsNumber)].map((e, i) => (\n      <DrawArrow\n        incommingName={arrowsRecord[i].incommingName}\n        name={arrowsRecord[i].name}\n        key={i}\n        forwardedRef={arrowsRefs.current[i]}\n        forwardedDivsRef={divsRefs.current}\n        graphState={graphState}\n      />\n    ));\n  };\n\n  const vertexRenderer = () => {\n    let rank = { ...graph[\"rank\"] };\n    let graphHeight = rank[`${topSorted[0]}`];\n    let rowProcessedTimes = {}; // 作為每一行div是否render過的計數器\n    // NOT using useState because setState cause a re-render\n    return (\n      // 按照拓墣排序迭代每個 vertex，同時紀錄他們所在階層 currentRow\n      topSorted.map((name, i) => {\n        let row = graphHeight - rank[name]; // 代表該 vertex name 在第幾行\n        rowProcessedTimes[row] = rowProcessedTimes[row] + 1 || 1; // Record to kwow current vertex is in n'th column\n        let column = rowProcessedTimes[row];\n\n        return (\n          <DrawVertex\n            name={name}\n            key={name}\n            column={column}\n            row={row}\n            forwardedRef={divsRefs.current[i]}\n            forwardedArrowsRefs={arrowsRefs.current}\n            graphState={graphState}\n            setGraphState={setGraphState}\n          />\n        );\n      })\n    );\n  };\n\n  return (\n    <div className=\"graph-container\">\n      <p id=\"instructions\">\n        Click and drag either div to see automatic arrow adjustments.\n      </p>\n      <div className=\"graph-wrapper\">\n        <svg xmlns=\"http://www.w3.org/2000/svg\" width=\"100%\" height=\"100%\">\n          <defs>\n            <marker\n              id=\"arrowhead\"\n              viewBox=\"0 0 10 10\"\n              refX=\"3\"\n              refY=\"5\"\n              markerWidth=\"6\"\n              markerHeight=\"6\"\n              orient=\"auto\"\n            >\n              <path d=\"M 0 0 L 10 5 L 0 10 z\" />\n            </marker>\n          </defs>\n          {arrowRenderer(arrowsRecord, arrowsNumber)}\n          {/* <ArrowDrawer graph={graph} topSorted={topSorted}/> */}\n        </svg>\n        {vertexRenderer()}\n      </div>\n      <ButtonGraph graphState={graphState} setGraphState={setGraphState} />\n    </div>\n  );\n}\n\n/**\n *\n * @param {object} graph instance of Graph\n * @returns {int} arrowsNumber\n * @returns {Object} arrowsRecord {name: verttx-name, incommingName: next-vertex-name}\n */\nconst arrowsInfoGetter = (graph) => {\n  let topSorted = [...graph[\"topSorted\"]];\n  let arrowsRecord = {};\n  let counter = 0;\n\n  topSorted.reverse().map((name, i) => {\n    let incommingNames = graph[\"vertices\"][name][\"incomingNames\"];\n    incommingNames.map((incommingName, j) => {\n      arrowsRecord[counter] = {\n        name: name,\n        incommingName: incommingName,\n      };\n      counter += 1;\n    });\n  });\n\n  return [arrowsRecord, counter];\n};\n/**\n * arrowsRecord = {\n *    0 : {\n *       name: \"c\",\n *       incommingName: \"b\"\n *      },\n *\n *    1 : {\n *       name: \"b\",\n *       incommingName: \"a\"\n *     }\n *  }\n */\n\n// Not using\n// from DOM's Str style 'transform: translateX(132px) translateY(61px)\n// to obj : { x: 132, y: 61}\nconst translateTracker = (e) => {\n  let transform = e.style.transform.split(\" \");\n  let translateX = transform[0].replace(/[^\\d.]/g, \"\");\n  let translateY = transform[1].replace(/[^\\d.]/g, \"\");\n  return {\n    x: parseInt(translateX),\n    y: parseInt(translateY),\n  };\n};\n","import React, { Fragment } from \"react\";\nimport DrawGraph from \"./DrawGraph\";\n\n/**\n * Represent graph instance creation layer\n * @param {object} verticesInput {vertex: '', incomming: '', outgoing: '}\n * @param {object} graph instance\n * @returns {Component} DrawGraph -- Layout for vertex's div and direction arrow svg\n */\n\nexport default function CreateVertex({ verticesInput, graph }) {\n  let { incomming, vertex, outgoing } = verticesInput;\n  let positionDefault = {};\n\n  const createVertex = () => {\n    if (incomming) {\n      incomming = incomming.split(\",\");\n      // str \"a\" → \"a\" || arr [a , b,c] → arr[a,b]\n      switch (incomming.length === 1) {\n        case true:\n          incomming = incomming[0];\n          break;\n        case false:\n          incomming.forEach((e, i) => {\n            incomming[i] = e.trim();\n          });\n          break;\n      }\n    }\n    if (outgoing) {\n      // str \"a\" → \"a\" || arr [a , b,c] → arr[a,b]\n      outgoing = outgoing.split(\",\");\n      switch (outgoing.length === 1) {\n        case true:\n          outgoing = outgoing[0];\n          break;\n        case false:\n          outgoing.forEach((e, i) => {\n            outgoing[i] = e.trim();\n          });\n          break;\n      }\n    }\n\n    // Create vertex\n    graph.addEdges(vertex, null, outgoing, incomming);\n  };\n\n  if (vertex) {\n    try {\n      createVertex();\n      graph.giveRank();\n    } catch (e) {\n      alert(e);\n    }\n  }\n\n  function test() {\n    // 按照拓墣排序迭代每個 vertex，同時紀錄他們所在階層 currentRow\n    let rank = graph[\"rank\"];\n    let topSorted = graph.topSorted;\n    let graphHeight = rank[`${topSorted[0]}`];\n    let rowProcessedTimes = {};\n    let posnMap = {};\n    topSorted.map((name, i) => {\n      let row = graphHeight - rank[name]; // 代表該 vertex name 在第幾行\n      rowProcessedTimes[row] = rowProcessedTimes[row] + 1 || 1; // Record to kwow current vertex is in n'th column\n      let column = rowProcessedTimes[row];\n      //console.log(`name: ${name}, row: ${row}, column: ${column}`)\n      posnMap[name] = { row, column };\n    });\n    console.log(posnMap);\n  }\n\n  return (\n    <Fragment>\n      <DrawGraph graph={graph} topSorted={graph[\"topSorted\"]} />\n    </Fragment>\n  );\n}\n","import React, { useState } from \"react\";\nimport VertexInput from \"./VertexInput\";\nimport CreateVertex from \"./CreateVertex\";\nimport { PositionContextProvider } from \"./common/PositionContext\";\nimport Graph from \"../dag/graphClass\";\n\nconst graph = new Graph();\n\n/**\n * Represent Graph obj's storage layer\n * @param {*}\n * @returns {Context} PositionContext -- each vertex div's DOM position state\n * @returns {Component} CreateVertex -- access graph's method to create vertex\n * @returns {Component} VertexInput -- access users's vertex input\n */\n\nfunction GraphMiddleWare() {\n  const [verticesInput, setVerticesInput] = useState({\n    vertex: \"\",\n    incomming: \"\",\n    outgoing: \"\",\n  });\n\n  return (\n    <div>\n      <PositionContextProvider>\n        <CreateVertex verticesInput={verticesInput} graph={graph} />\n        <VertexInput setVerticesInput={setVerticesInput} />\n      </PositionContextProvider>\n    </div>\n  );\n}\n\nexport default GraphMiddleWare;\n","/*\n    export instance graph & his method \n*/\n\n/*\ngraph 實例內的prop：\n\ngraph =  {\n  names: [ 'benson', 'ben ],\n  vertices: {\n    benson: {\n      name: 'benson',\n      incoming: {},\n      incomingNames: [],\n      hasOutgoing: false,\n      value: null\n    },\n    ben: {...}\n  }\n  rank: {benson:0, ben:1}\n  topSorted: []\n  \n}\n*/\n\nimport Dag from \"./dagClass\";\n\nexport default class Graph extends Dag {\n  constructor() {\n    super();\n    this.rank = {};\n    this.topSorted = [];\n  }\n\n  topologySortCaller() {\n    let result = [];\n    this.topsort((vertex, path) => {\n      result.push(vertex.name);\n      // 參數 path 為當前迭代之路徑Array\n    });\n    this.topSorted = result;\n    return result;\n  }\n\n  giveRank() {\n    // if not anonymous, this would not bind\n    if (this.topSorted.length !== this.names.length) {\n      this.topologySortCaller();\n    }\n    this[\"rank\"] = {}; // if not reset to empty, second time calling visit_giveRank wouod cause unexpected result\n    this._visit_giveRank();\n  }\n\n  _visit_giveRank() {\n    let leafToRootArr = [...this.topSorted].reverse();\n    let rankNumber = 0;\n    leafToRootArr.forEach((name, i) => {\n      let incomingNames = [...this.vertices[name].incomingNames];\n      let nextName = leafToRootArr[i + 1]; // nextName = the vertex on left side in topsort\n      // if nextName is same rank\n      if (!incomingNames.includes(nextName)) {\n        this.rank[name] = rankNumber;\n        return;\n      }\n      // else if nextName is higher rank\n      if (incomingNames.includes(nextName)) {\n        this.rank[name] = rankNumber;\n        rankNumber += 1;\n        return;\n      }\n    });\n  }\n}\n\n// let graph = new Graph();\n\n// module.exports = {\n//     graph\n// }\n","// visit from leaf to root\n/*\nDAG 實例：\n\nDAG {\n  names: [ 'benson' ],\n  vertices: {\n    benson: {\n      name: 'benson',\n      incoming: {},\n      incomingNames: [],\n      hasOutgoing: false,\n      value: null\n    }\n  }\n}\n*/\nexport default class Dag {\n  constructor() {\n    this.names = [];\n    this.vertices = {};\n  }\n\n  add(name) {\n    // 取得參照：節點本身。或排錯\n    if (!name) {\n      return;\n    }\n    if (this.vertices.hasOwnProperty(name)) {\n      return this.vertices[name];\n    }\n\n    // 建構：節點\n    let vertex = {\n      name: name,\n      incoming: {},\n      incomingNames: [],\n      hasOutgoing: false,\n      value: null,\n    };\n    this.vertices[name] = vertex;\n    this.names.push(name);\n    return vertex;\n  }\n\n  map(name, value) {\n    this.add(name).value = value;\n  }\n\n  // visit all one vertex's incomming vertcies\n  visit(vertex, fn, visited, path) {\n    let name = vertex.name;\n    let vertices = vertex.incoming;\n    let names = vertex.incomingNames;\n    let len = names.length;\n\n    if (!visited) {\n      visited = {};\n    } // visited 紀錄已訪節點，若自己為已訪問狀態，就結束 Recursive fn\n    if (!path) {\n      path = [];\n    } // path 用於登記訪問每個 incoming 的順序\n\n    if (visited.hasOwnProperty(name)) {\n      return;\n    } // visited 紀錄已訪節點，若自己為已訪問狀態，就結束 Recursive fn\n\n    path.push(name); // 用來當作 要遞迴的fn函數 的參數 ->> visit()之後可再針對 路徑做動作，動作定義外包出去\n\n    visited[name] = true; // 物件形式，登記為已訪問\n\n    // Recursive fn\n    for (let i = 0; i < len; i++) {\n      this.visit(vertices[names[i]], fn, visited, path);\n    }\n    fn(vertex, path); // 遞迴執行fn 例如 checkCycle() or topsort的callback\n    path.pop();\n  }\n\n  addEdge(fromName, toName) {\n    if (!fromName || !toName || fromName === toName) {\n      return;\n    }\n    let from = this.add(fromName);\n    let to = this.add(toName);\n    if (to.incoming.hasOwnProperty(fromName)) {\n      return;\n    }\n\n    function checkCycle(vertex, path) {\n      if (vertex.name === toName) {\n        throw new Error(\n          \"cycle detected: \" + toName + \" <- \" + path.join(\" <- \")\n        );\n      }\n    }\n\n    this.visit(from, checkCycle);\n    from.hasOutgoing = true;\n    to.incoming[fromName] = from;\n    to.incomingNames.push(fromName);\n  }\n\n  addEdges(name, value, before, after) {\n    this.map(name, value);\n    if (before) {\n      // if before is string\n      if (Object.prototype.toString.call(before) === \"[object String]\") {\n        this.addEdge(name, before);\n      }\n\n      // if before is Array\n      if (Array.isArray(before)) {\n        before.forEach((vertex) => {\n          this.addEdge(name, vertex);\n        });\n      }\n    }\n    if (after) {\n      // if after is string\n      if (Object.prototype.toString.call(after) === \"[object String]\") {\n        this.addEdge(after, name);\n      }\n\n      // if after is Array\n      if (Array.isArray(after)) {\n        after.forEach((vertex) => {\n          this.addEdge(vertex, name);\n        });\n      }\n    }\n  }\n\n  // topological sort\n  // visit path start from leaf\n  topsort(fn) {\n    let visited = {};\n    let vertices = this.vertices;\n    let names = this.names;\n    let len = names.length;\n\n    // 迭代每個 vertex 節點，若為最尾端的，則使遞迴(扣掉他後對剩餘的再遞迴找)\n    for (let i = 0; i < len; i++) {\n      let vertex = vertices[names[i]];\n      if (!vertex.hasOutgoing) {\n        this.visit(vertex, fn, visited);\n      }\n    }\n  }\n}\n","import GraphMiddleWare from './components/GraphMiddleWare';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <GraphMiddleWare/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nimport './assets/SCSS/base.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}